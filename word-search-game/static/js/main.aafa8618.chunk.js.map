{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WordSearchGame","theme","setTheme","useState","spangram","setSpangram","words","setWords","grid","setGrid","selectedLetters","setSelectedLetters","foundWords","setFoundWords","isSolved","setIsSolved","showWords","setShowWords","useEffect","initGame","handleLetterClick","row","col","some","word","includes","concat","_ref","r","c","length","slice","isAdjacent","prev","curr","prevRow","prevCol","currRow","currCol","Math","abs","every","rowIndex","_","colIndex","alert","React","createElement","style","display","flexDirection","alignItems","justifyContent","minHeight","padding","backgroundColor","borderRadius","boxShadow","maxWidth","width","fontSize","fontWeight","marginBottom","color","gridTemplateColumns","gap","map","letter","key","aspectRatio","_ref4","onClick","disabled","checkWord","_ref2","join","w","toUpperCase","_ref3","listStyleType","paddingLeft","textDecoration","found","index","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.aafa8618.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Placeholder function for LLM API call\nconst getWordsFromLLM = () => {\n  return {\n    theme: \"Tomatoes aren't vegetables, they'reâ€¦\",\n    spangram: \"Fruits\",\n    words: [\"Apple\", \"Kiwi\", \"Banana\", \"Pineapple\", \"Orange\"]\n  };\n};\n\n// Placeholder function for grid generation\nconst generateGrid = () => {\n  return [\n    ['A', 'K', 'I', 'P', 'F', 'E'],\n    ['P', 'W', 'P', 'L', 'R', 'G'],\n    ['P', 'I', 'A', 'E', 'U', 'N'],\n    ['L', 'N', 'A', 'E', 'I', 'A'],\n    ['E', 'A', 'A', 'N', 'T', 'R'],\n    ['B', 'N', 'P', 'I', 'S', 'O']\n  ];\n};\n\nconst WordSearchGame = () => {\n  const [theme, setTheme] = useState('');\n  const [spangram, setSpangram] = useState('');\n  const [words, setWords] = useState([]);\n  const [grid, setGrid] = useState([]);\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [foundWords, setFoundWords] = useState([]);\n  const [isSolved, setIsSolved] = useState(false);\n  const [showWords, setShowWords] = useState(false);\n\n  useEffect(() => {\n    const initGame = () => {\n      const { theme, spangram, words } = getWordsFromLLM();\n      setTheme(theme);\n      setSpangram(spangram);\n      setWords(words);\n      setGrid(generateGrid());\n      setIsSolved(false);\n      setFoundWords([]);\n    };\n\n    initGame();\n  }, []);\n\n  const isAdjacent = (prev, curr) => {\n    const [prevRow, prevCol] = prev;\n    const [currRow, currCol] = curr;\n    return Math.abs(prevRow - currRow) <= 1 && Math.abs(prevCol - currCol) <= 1;\n  };\n\n  const handleLetterClick = (row, col) => {\n    if (foundWords.some(word => word.includes(`${row}-${col}`))) return;\n\n    if (selectedLetters.some(([r, c]) => r === row && c === col)) {\n      if (selectedLetters[selectedLetters.length - 1][0] === row && selectedLetters[selectedLetters.length - 1][1] === col) {\n        setSelectedLetters(selectedLetters.slice(0, -1));\n      }\n      return;\n    }\n\n    if (selectedLetters.length === 0 || isAdjacent(selectedLetters[selectedLetters.length - 1], [row, col])) {\n      setSelectedLetters([...selectedLetters, [row, col]]);\n    }\n  };\n\n  const checkWord = () => {\n    const word = selectedLetters.map(([row, col]) => grid[row][col]).join('');\n    if ([spangram, ...words].map(w => w.toUpperCase()).includes(word.toUpperCase())) {\n      setFoundWords(prev => [...prev, selectedLetters.map(([row, col]) => `${row}-${col}`)]);\n      setSelectedLetters([]);\n    } else {\n      setSelectedLetters([]);\n    }\n  };\n\n  const isGameWon = () => {\n    if (!grid.length) return false;\n    return grid.every((row, rowIndex) =>\n      row.every((_, colIndex) => \n        foundWords.some(word => word.includes(`${rowIndex}-${colIndex}`))\n      )\n    );\n  };\n\n  useEffect(() => {\n    const gameWon = isGameWon();\n    if (gameWon) {\n      setIsSolved(true);\n      alert('Congratulations! You won the game!');\n    }\n  }, [foundWords, grid]);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '100vh', padding: '1rem', backgroundColor: '#f3f4f6' }}>\n      <div style={{ backgroundColor: 'white', padding: '2rem', borderRadius: '0.5rem', boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)', maxWidth: '48rem', width: '100%' }}>\n        <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>\n          {isSolved && <span style={{ color: 'green' }}>Solved! </span>}\n          Theme: {theme}\n        </h2>\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(6, 1fr)', gap: '0.5rem', marginBottom: '1rem' }}>\n          {grid.map((row, rowIndex) => (\n            row.map((letter, colIndex) => (\n              <button\n                key={`${rowIndex}-${colIndex}`}\n                style={{\n                  aspectRatio: '1',\n                  fontSize: '1.25rem',\n                  fontWeight: 'bold',\n                  borderRadius: '0.25rem',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: foundWords.some(word => word.includes(`${rowIndex}-${colIndex}`))\n                    ? '#3b82f6'\n                    : selectedLetters.some(([r, c]) => r === rowIndex && c === colIndex)\n                    ? '#fde68a'\n                    : '#e5e7eb',\n                  color: foundWords.some(word => word.includes(`${rowIndex}-${colIndex}`)) ? 'white' : 'black'\n                }}\n                onClick={() => handleLetterClick(rowIndex, colIndex)}\n                disabled={foundWords.some(word => word.includes(`${rowIndex}-${colIndex}`))}\n              >\n                {letter}\n              </button>\n            ))\n          ))}\n        </div>\n        <button \n          onClick={checkWord}\n          disabled={selectedLetters.length === 0}\n          style={{\n            width: '100%',\n            padding: '0.5rem 1rem',\n            backgroundColor: '#10b981',\n            color: 'white',\n            borderRadius: '0.25rem',\n            marginBottom: '1rem'\n          }}\n        >\n          Check Word\n        </button>\n        <button\n          onClick={() => setShowWords(!showWords)}\n          style={{\n            width: '100%',\n            padding: '0.5rem 1rem',\n            backgroundColor: '#3b82f6',\n            color: 'white',\n            borderRadius: '0.25rem',\n            marginBottom: '1rem'\n          }}\n        >\n          {showWords ? 'Hide Words' : 'Show Words'}\n        </button>\n        {showWords && (\n          <div>\n            <h3 style={{ fontSize: '1.25rem', fontWeight: 'bold', marginBottom: '0.5rem' }}>Words to find:</h3>\n            <ul style={{ listStyleType: 'disc', paddingLeft: '1.25rem' }}>\n              <li style={{ textDecoration: foundWords.some(found => found.length === spangram.length) ? 'line-through' : 'none' }}>\n                {spangram} (Spangram)\n              </li>\n              {words.map((word, index) => (\n                <li key={index} style={{ textDecoration: foundWords.some(found => found.length === word.length) ? 'line-through' : 'none' }}>\n                  {word}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WordSearchGame;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}